{"version":3,"file":"static/js/542.cf5bd548.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","redux/filter/selectors.js","components/Filter/FilterStyled.jsx","components/Filter/Filter.jsx","redux/contacts/selectors.js","components/ContactForm/ContactFormStyled.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactListStyled.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","export const selectFilter = state => state.filter;","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  margin: 20px auto 30px auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nexport const Label = styled.label`\n  color: #000000;\n  font-size: 20px;\n  margin-bottom: 5px;\n`;\n\nexport const Input = styled.input`\n  width: 400px;\n  padding: 10px;\n  margin: 0 auto;\n  border-radius: 4px;\n  border: 3px solid #689268;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { selectFilter } from '../../redux/filter/selectors';\nimport { changeFilter } from '../../redux/filter/filterSlice';\nimport { Wrapper, Input, Label } from './FilterStyled';\n\nexport const Filter = () => {\n  const value = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const onChange = event => {\n    const normalizedValue = event.target.value.toLowerCase();\n\n    dispatch(changeFilter(normalizedValue));\n  };\n\n  return (\n    <Wrapper>\n      <Label>Find contacts by name</Label>\n      <Input type=\"text\" value={value} onChange={onChange} />\n    </Wrapper>\n  );\n};\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from '../../redux/filter/selectors';\n\n\nexport const selectLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  width: 400px;\n  padding: 12px;\n  background-color: #e7ecf2;\n  border: 3px solid #689268;\n  border-radius: 4px;\n  margin: 0 auto;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 16px;\n  color: #00000;\n  font-size: 20px;\n`;\n\nexport const Input = styled.input`\n  color: #171718;\n  padding: 8px 12px;\n  font: inherit;\n  cursor: pointer;\n`;\n\nexport const Button = styled.button`\n  padding: 8px 12px;\n  font: inherit;\n  cursor: pointer;\n  border-radius: 4px;\n  border: 3px solid #689268;\n  color: #00000;\n  font-size: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &:hover,\n  &:focus {\n    color: white;\n    background-color: #689268;\n    cursor: pointer;\n  }\n`;\n","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Filter } from '../Filter/Filter';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { addContacts } from '../../redux/contacts/operations';\nimport { Form, Label, Input, Button } from './ContactFormStyled';\n\nconst nameInputId = nanoid();\nconst numberInputId = nanoid();\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const isInContacts = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (isInContacts) {\n      alert(`${name} Already in Contacts`);\n\n      return;\n    }\n\n    dispatch(addContacts({ name, number }));\n\n    setName('');\n    setNumber('');\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <>\n      <Form onSubmit={handleSubmit}>\n        <Label htmlFor={nameInputId}>\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Enter a name\"\n            value={name}\n            onChange={handleChange}\n            pattern=\"^[^\\d]+$\"\n            title=\"The name must contain only letters, apostrophes, hyphens and indents\"\n            required\n          />\n        </Label>\n\n        <Label htmlFor={numberInputId}>\n          Number\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Enter a phone number\"\n            value={number}\n            onChange={handleChange}\n            pattern=\"\\+\\d{12}\"\n            minlength=\"13\"\n            maxlength=\"13\"\n            title=\"The phone number must start with + followed by 12 digits\"\n            required\n          />\n        </Label>\n\n        <Button type=\"submit\">Add contact </Button>\n      </Form>\n      <Filter />\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  width: 400px;\n  padding: 12px;\n  border-radius: 4px;\n  background-color: #e7ecf2;\n  border: 3px solid #689268;\n  margin: 0 auto;\n`;\n\nexport const Item = styled.li`\n  background-color: #ffffff;\n  border: 3px solid #689268;\n  padding: 10px;\n  border-radius: 4px;\n  margin-bottom: 5px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 20px;\n`;\n\nexport const Button = styled.button`\n  padding: 4px 8px;\n  font: inherit;\n  cursor: pointer;\n  border-radius: 4px 8px;\n  border: 3px solid #689268;\n  display: flex;\n  align-items: center;\n\n  &:hover,\n  &:focus {\n    color: white;\n    background-color: #689268;\n    cursor: pointer;\n  }\n`;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from '../../redux/contacts/selectors';\nimport { useDispatch } from 'react-redux';\nimport { deleteContacts } from '../../redux/contacts/operations';\nimport { List, Item, Button } from './ContactListStyled';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <List>\n      {contacts.map(contact => (\n        <Item key={contact.id}>\n          {contact.name + ' : ' + contact.number}\n          {\n            <Button\n              type=\"button\"\n              name=\"delete\"\n              onClick={() => dispatch(deleteContacts(contact.id))}\n            >\n              Delete\n            </Button>\n          }\n        </Item>\n      ))}\n    </List>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactForm } from '../components/ContactForm/ContactForm';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { fetchContacts } from '../redux/contacts/operations';\nimport { selectLoading } from '../redux/contacts/selectors';\nimport { Loader } from '../components/Loader/Loader';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <title>Your contacts</title>\n      <ContactForm /> {}\n      <div>{isLoading && <Loader />}</div> {}\n      <ContactList /> {}\n    </>\n  );\n}\n"],"names":["nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","selectFilter","state","filter","Wrapper","styled","_templateObject","_taggedTemplateLiteral","Label","_templateObject2","Input","_templateObject3","Filter","value","useSelector","dispatch","useDispatch","_jsxs","children","_jsx","type","onChange","event","normalizedValue","target","toLowerCase","changeFilter","selectLoading","contacts","isLoading","selectContacts","items","selectVisibleContacts","createSelector","contact","name","includes","Form","Button","_templateObject4","nameInputId","numberInputId","ContactForm","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","number","setNumber","handleChange","_event$currentTarget","currentTarget","_Fragment","onSubmit","preventDefault","some","alert","concat","addContacts","htmlFor","placeholder","pattern","title","required","minlength","maxlength","List","Item","ContactList","map","onClick","deleteContacts","Tasks","useEffect","fetchContacts","Loader"],"sourceRoot":""}